import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from prophet import Prophet
from scipy.stats import norm

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ------------------
def forecasting_fn(df, plant, coin):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Prophet ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏±‡∏î interval_width ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Safety Stock ‡πÅ‡∏¢‡∏Å
    """
    name = f"{plant}: {coin}"
    df_filtered = df[df['PLANTNAME'] == plant][['date', coin]]
    df_filtered.columns = ['ds', 'y']
    df_filtered['ds'] = pd.to_datetime(df_filtered['ds'])
    
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    df_filtered.dropna(inplace=True)

    model = Prophet(
        interval_width=0.95,  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        changepoint_prior_scale=0.09983219300142447,
        changepoint_range=0.8349896986260539,
        seasonality_prior_scale=9.433629187865968,
        seasonality_mode='additive',
        yearly_seasonality=1,
        growth='linear'
    )
    model.fit(df_filtered)

    future = model.make_future_dataframe(periods=60, freq='ME')
    forecast = model.predict(future)

    df_filtered.reset_index(inplace=True)
    return model, forecast, future, name, df_filtered

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏ß‡∏° ------------------
def plot_forecast_plotly(name, df, forecast, fiscal_year=None):
    if fiscal_year:
        year_ad = fiscal_year - 543
        start_date = pd.to_datetime(f"{year_ad - 1}-10-01")
        end_date = pd.to_datetime(f"{year_ad}-09-30")
        df = df[(df['ds'] >= start_date) & (df['ds'] <= end_date)]
        forecast = forecast[(forecast['ds'] >= start_date) & (forecast['ds'] <= end_date)]

    upper_bound = forecast['yhat_upper']
    lower_bound = forecast['yhat_lower']

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=df['ds'],
        y=df['y'],
        mode='markers',
        name='Actual',
        marker=dict(color='blue', size=8, symbol='circle')
    ))

    fig.add_trace(go.Scatter(
        x=forecast['ds'],
        y=forecast['yhat'],
        mode='lines',
        name='Forecast',
        line=dict(color='rgba(255, 99, 132, 0.9)', width=3)
    ))

    # ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Safety Stock)
    fig.add_trace(go.Scatter(
        x=forecast['ds'],
        y=upper_bound,
        mode='lines',
        line=dict(width=0),
        showlegend=False
    ))
    fig.add_trace(go.Scatter(
        x=forecast['ds'],
        y=lower_bound,
        mode='lines',
        fill='tonexty',
        fillcolor='rgba(255, 99, 132, 0.15)',
        line=dict(width=0),
        name='Confidence Interval (95%)'
    ))

    fig.update_layout(
        title=f'{name} Forecasting (Prophet)',
        xaxis_title='Month',
        yaxis_title='Coins (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)',
        width=1100,
        height=550,
        barmode='overlay',
        legend=dict(
            orientation='h',
            yanchor='bottom',
            y=1.05,
            xanchor='right',
            x=1
        ),
        margin=dict(l=50, r=50, t=80, b=50)
    )

    st.plotly_chart(fig, use_container_width=True)

# ------------------ Streamlit App ------------------
st.set_page_config(page_title="Forecasting Coins", layout="wide")
st.title("ü¶â Owl Mint Forecast Dashboard")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_excel("Data_Monthly_Updated.xlsx", index_col=0)
df = data.copy()
df.rename(columns={'Fiscal_Year': 'FiscalYear'}, inplace=True)

coin_options = ['‡∏£‡∏ß‡∏°', '0.25', '0.5', '1.0', '2.0', '5.0', '10.0']
center_options = df['PLANTNAME'].unique().tolist()
fiscal_years = sorted(df['FiscalYear'].unique().tolist())

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
col1, col2, col3 = st.columns(3)
with col1:
    selected_center = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå (Center)", center_options)
with col2:
    selected_coin = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (Coin)", coin_options)
with col3:
    year_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + fiscal_years[::-1]
    selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ)", year_options)

# Slider ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (Service Level)
service_level_percent = st.slider(
    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (%) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Safety Stock (Service Level)",
    min_value=50.0, max_value=99.9, value=95.0, step=0.1
)
service_level = service_level_percent / 100

# Forecast
model, forecast, future, name, df_filtered = forecasting_fn(df, plant=selected_center, coin=selected_coin)

# --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SAFETY STOCK ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ---
# 1. ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
merged_historical = pd.merge(df_filtered, forecast[['ds', 'yhat']], on='ds', how='inner')

# 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Forecast Error (‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á - ‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå)
merged_historical['error'] = merged_historical['y'] - merged_historical['yhat']

# 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Standard Deviation ‡∏Ç‡∏≠‡∏á Error
std_error = merged_historical['error'].std()

# 4. ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ Z-score ‡∏à‡∏≤‡∏Å Service Level ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
z_score = norm.ppf(service_level)

# 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Safety Stock (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏´‡∏≤‡∏Å Service Level < 50%)
safety_stock_value = max(0, z_score * std_error) if pd.notna(std_error) else 0

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Safety Stock ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
forecast['safety_stock'] = safety_stock_value
# -----------------------------------

# ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
coin_unit = '‡∏ö‡∏≤‡∏ó' if selected_coin == '‡∏£‡∏ß‡∏°' or float(selected_coin) >= 1 else '‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå'

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
mean_forecast = forecast['yhat'].mean()
total_required = mean_forecast + safety_stock_value

# ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
mean_forecast_year = mean_forecast * 12
safety_stock_year = safety_stock_value * 12
total_required_year = total_required * 12

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
st.subheader(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç {selected_coin} {coin_unit} @ {selected_center}: ‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Forecast)", f"{mean_forecast:,.2f}")
with col2:
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ Safety Stock ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
    st.metric("Safety Stock ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Forecast Error)", f"{safety_stock_value:,.2f}")
with col3:
    st.metric("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ (Forecast + Safety Stock)", f"{total_required:,.2f}")

col4, col5, col6 = st.columns(3)
with col4:
    st.metric("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡πà‡∏≠‡∏õ‡∏µ", f"{mean_forecast_year:,.2f}")
with col5:
    st.metric("Safety Stock ‡∏ï‡πà‡∏≠‡∏õ‡∏µ", f"{safety_stock_year:,.2f}")
with col6:
    st.metric("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ", f"{total_required_year:,.2f}")

st.info(f"Safety Stock ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡∏ì ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (Service Level) {service_level_percent:.1f}% (Z-score: {z_score:.2f}, Std Dev of Error: {std_error:.2f})")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
plot_forecast_plotly(name, df_filtered, forecast, fiscal_year=None if selected_year == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else selected_year)


# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
monthly_forecast = forecast[['ds', 'yhat']].copy()
monthly_forecast['safety_stock'] = safety_stock_value # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
monthly_forecast['total_required'] = monthly_forecast['yhat'] + monthly_forecast['safety_stock']
monthly_forecast['month'] = monthly_forecast['ds'].dt.strftime('%b %Y')
latest_date = df_filtered['ds'].max()
monthly_forecast = monthly_forecast[monthly_forecast['ds'] > latest_date].head(12)
monthly_forecast_display = monthly_forecast[['month', 'yhat', 'safety_stock', 'total_required']].copy()
monthly_forecast_display.columns = ['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', 'Safety Stock', '‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ']
monthly_forecast_display = monthly_forecast_display.round(2)

st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)")
st.dataframe(monthly_forecast_display, use_container_width=True)

# (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Safety Stock ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
# ... (‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ‡∏Å‡∏£‡∏≤‡∏ü grouped bar ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
label_map = {'yhat': '‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', 'safety_stock': 'Safety Stock', 'total_required': '‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}

# ‡∏Å‡∏£‡∏≤‡∏ü grouped bar ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ‡∏Ñ‡∏£‡∏ö 5 ‡∏õ‡∏µ
st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
for year in range(latest_date.year + 1, latest_date.year + 6):
    yearly_chart = forecast.copy()
    yearly_chart['year'] = yearly_chart['ds'].dt.year
    yearly_chart['month'] = yearly_chart['ds'].dt.month
    yearly_chart['month_name'] = yearly_chart['ds'].dt.strftime('%b')
    yearly_chart['safety_stock'] = safety_stock_value # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    yearly_chart['total_required'] = yearly_chart['yhat'] + yearly_chart['safety_stock'] # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà

    this_year_data = yearly_chart[yearly_chart['year'] == year]
    monthly_grouped = this_year_data.groupby(['month', 'month_name']).agg({
        'yhat': 'mean',
        'safety_stock': 'mean',
        'total_required': 'mean'
    }).reset_index()

    monthly_grouped['month_name'] = pd.Categorical(monthly_grouped['month_name'], categories=month_order, ordered=True)
    monthly_grouped.sort_values('month', inplace=True)

    monthly_long = monthly_grouped.melt(
        id_vars='month_name',
        value_vars=['yhat', 'safety_stock', 'total_required'],
        var_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
        value_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
    )
    monthly_long['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] = monthly_long['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'].map(label_map)

    fig_bar = px.bar(
        monthly_long,
        x='month_name',
        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
        color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
        barmode='group',
        text=monthly_long['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].apply(lambda x: f"{x:,.2f}"),
        labels={'month_name': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì'},
        title=f'‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ({year})'
    )
    fig_bar.update_traces(textposition='outside')

    total_yhat = this_year_data['yhat'].sum()
    total_safety = this_year_data['safety_stock'].sum()
    total_total = this_year_data['total_required'].sum()

    fig_bar.update_layout(
        width=1000,
        height=500,
        annotations=[
            dict(
                x=0.5,
                y=1.15,
                xref='paper',
                yref='paper',
                text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏õ‡∏µ {year}: ‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå = {total_yhat:,.2f}, Safety Stock = {total_safety:,.2f}, ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ = {total_total:,.2f}",
                showarrow=False,
                font=dict(size=12)
            )
        ]
    )
    st.plotly_chart(fig_bar, use_container_width=True)


if st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    full_results = pd.merge(
        forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']],
        df_filtered[['ds', 'y']],
        on='ds',
        how='left'
    )
    full_results.rename(columns={
        'ds': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
        'y': '‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (Actual)',
        'yhat': '‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Forecast)',
        'yhat_lower': '‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Lower Bound)',
        'yhat_upper': '‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Upper Bound)'
    }, inplace=True)

    full_results['‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á (Actual - Forecast)'] = full_results['‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (Actual)'] - full_results['‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Forecast)']

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RMSE ‡πÅ‡∏•‡∏∞ MAPE ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    valid_results = full_results.dropna(subset=['‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (Actual)', '‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Forecast)'])
    actual = valid_results['‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (Actual)']
    forecast_vals = valid_results['‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Forecast)']
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not actual.empty:
        rmse = np.sqrt(np.mean((actual - forecast_vals) ** 2))
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MAPE
        mape = np.mean(np.abs((actual - forecast_vals) / actual[actual != 0])) * 100
    else:
        rmse = np.nan
        mape = np.nan


    full_results = full_results.round(2)
    st.dataframe(full_results.reset_index(drop=True), use_container_width=True)

    st.write(f"**RMSE (Root Mean Square Error):** {rmse:,.2f}")
    st.write(f"**MAPE (Mean Absolute Percentage Error):** {mape:,.2f}%")
